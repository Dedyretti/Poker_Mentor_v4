from app.bot.bot_core import bot
from app.bot.keyboards import get_main_menu, get_game_keyboard, get_move_keyboard
from app.game.game_service import game_service
from app.utils.logger import get_logger

logger = get_logger(__name__)

@bot.message_handler(func=lambda message: message.text == "üìä –ò–Ω—Ñ–æ –æ —Å—Ç–æ–ª–µ")
def show_table_info(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–µ"""
    try:
        game_state = game_service.get_game_state(str(message.from_user.id))
        
        if not game_state:
            bot.send_message(
                message.chat.id,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!",
                reply_markup=get_main_menu()
            )
            return
        
        player_info = game_state['players'][0]  # –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        table_text = f"""
üéØ <b>–£—á–µ–±–Ω—ã–π —Å—Ç–æ–ª</b>

üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game_state['players'])}
üí∞ –ë–ª–∞–π–Ω–¥—ã: {game_state.get('small_blind', 10)}/{game_state.get('big_blind', 20)}
üíµ –¢–≤–æ–π —Å—Ç–µ–∫: {player_info['stack']}
üìç –ü–æ–∑–∏—Ü–∏—è: {game_state['current_player']}
üìä –°—Ç–∞–¥–∏—è: {game_state['state']}

üÉè <b>–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:</b> {' '.join(player_info['hole_cards']) if player_info['hole_cards'] else '–°–∫—Ä—ã—Ç–æ'}

<i>–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ä—É–∫–∞! üí™</i>
        """
        
        bot.send_message(
            message.chat.id,
            table_text,
            reply_markup=get_game_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error showing table info: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ–ª–µ.",
            reply_markup=get_main_menu()
        )

@bot.message_handler(func=lambda message: message.text == "üéØ –°–¥–µ–ª–∞—Ç—å —Ö–æ–¥")
def make_move(message):
    """–°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        game_state = game_service.get_game_state(str(message.from_user.id))
        
        if not game_state:
            bot.send_message(
                message.chat.id,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!",
                reply_markup=get_main_menu()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        available_actions = game_service.get_available_actions(str(message.from_user.id))
        
        actions_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        for action, available in available_actions.items():
            if available:
                actions_text += f"‚Ä¢ {action.upper()}\n"
        
        move_text = f"""
üéØ <b>–¢–≤–æ–π —Ö–æ–¥</b>

üìä <b>–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:</b>
‚Ä¢ –ë–∞–Ω–∫: {game_state['pot']} —Ñ–∏—à–µ–∫
‚Ä¢ –°—Ç–∞–¥–∏—è: {game_state['state']}
‚Ä¢ –¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è: {game_state['current_player']}

üÉè <b>–¢–≤–æ—è —Ä—É–∫–∞:</b> {' '.join(game_state['players'][0]['hole_cards'])}
üìà <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
{actions_text}

<b>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
        """
        
        bot.send_message(
            message.chat.id,
            move_text,
            reply_markup=get_move_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in make_move: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.",
            reply_markup=get_game_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
@bot.message_handler(func=lambda message: message.text == "‚úÖ –ß–µ–∫")
def check_move(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ–∫–∞"""
    try:
        success = game_service.make_player_move(str(message.from_user.id), "check")
        
        if success:
            bot.send_message(
                message.chat.id,
                "‚úÖ <b>–¢—ã —Å–¥–µ–ª–∞–ª –ß–ï–ö</b>\n\n"
                "–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É.\n"
                "–ñ–¥–µ–º –¥–µ–π—Å—Ç–≤–∏–π –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤...\n\n"
                "<i>–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ! üéØ</i>",
                reply_markup=get_game_keyboard(),
                parse_mode='HTML'
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ–∫ –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
                reply_markup=get_move_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in check_move: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.",
            reply_markup=get_game_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üì• –ö–æ–ª–ª (20)")
def call_move(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–∞"""
    try:
        success = game_service.make_player_move(str(message.from_user.id), "call", 20)
        
        if success:
            bot.send_message(
                message.chat.id,
                "üì• <b>–¢—ã —Å–¥–µ–ª–∞–ª –ö–û–õ–õ (20 —Ñ–∏—à–µ–∫)</b>\n\n"
                "–¢—ã —É—Ä–∞–≤–Ω—è–ª —Å—Ç–∞–≤–∫—É –∏ –æ—Å—Ç–∞–ª—Å—è –≤ –∏–≥—Ä–µ.\n"
                "–ë–∞–Ω–∫ —É–≤–µ–ª–∏—á–∏–ª—Å—è –¥–æ 50 —Ñ–∏—à–µ–∫.\n\n"
                "<i>–°–æ–ª–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! üí∞</i>",
                reply_markup=get_game_keyboard(),
                parse_mode='HTML'
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–ª –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
                reply_markup=get_move_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in call_move: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.",
            reply_markup=get_game_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üì§ –†–µ–π–∑")
def raise_move(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–π–∑–∞"""
    try:
        success = game_service.make_player_move(str(message.from_user.id), "raise", 60)
        
        if success:
            bot.send_message(
                message.chat.id,
                "üì§ <b>–¢—ã —Å–¥–µ–ª–∞–ª –†–ï–ô–ó –¥–æ 60 —Ñ–∏—à–µ–∫</b>\n\n"
                "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∏–≥—Ä–∞! üí™\n"
                "–¢—ã —É–≤–µ–ª–∏—á–∏–ª —Å—Ç–∞–≤–∫—É –≤ 3 —Ä–∞–∑–∞.\n"
                "–ë–∞–Ω–∫: 90 —Ñ–∏—à–µ–∫\n\n"
                "<i>–û–ø–ø–æ–Ω–µ–Ω—Ç—ã –≤ –∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ! üòÆ</i>",
                reply_markup=get_game_keyboard(),
                parse_mode='HTML'
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–π–∑ –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
                reply_markup=get_move_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in raise_move: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.",
            reply_markup=get_game_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üõë –§–æ–ª–¥")
def fold_move(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–ª–¥–∞"""
    try:
        success = game_service.make_player_move(str(message.from_user.id), "fold")
        
        if success:
            bot.send_message(
                message.chat.id,
                "üõë <b>–¢—ã —Å–¥–µ–ª–∞–ª –§–û–õ–î</b>\n\n"
                "–¢—ã —Å–±—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—ã –∏ –≤—ã—à–µ–ª –∏–∑ —Ä–∞–∑–¥–∞—á–∏.\n"
                "–°–æ—Ö—Ä–∞–Ω–∏–ª 20 —Ñ–∏—à–µ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.\n\n"
                "<i>–ò–Ω–æ–≥–¥–∞ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ - –ª—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è! üéØ</i>",
                reply_markup=get_game_keyboard(),
                parse_mode='HTML'
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ–ª–¥ –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
                reply_markup=get_move_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in fold_move: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.",
            reply_markup=get_game_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–µ")
def back_to_game(message):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–æ–≤–æ–º—É –º–µ–Ω—é"""
    bot.send_message(
        message.chat.id,
        "üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±–∑–æ—Ä—É –∏–≥—Ä—ã...",
        reply_markup=get_game_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—É–∫–∏")
def show_hand_stats(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä—É–∫–∏"""
    bot.send_message(
        message.chat.id,
        "üìä <b>–ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏: A‚ô• K‚ô•</b>\n\n"
        "üéØ <b>–®–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É:</b> 67%\n"
        "üí™ <b>–°–∏–ª–∞ —Ä—É–∫–∏:</b> –ü—Ä–µ—Ñ–ª–æ–ø –º–æ–Ω—Å—Ç—Ä\n"
        "‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> –¢–æ–ø 3% —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ä—É–∫\n\n"
        "üìà <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ü—Ä–µ—Ñ–ª–æ–ø: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–π–∑\n"
        "‚Ä¢ –ü–æ—Å—Ç—Ñ–ª–æ–ø: –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∞–≥—Ä–µ—Å—Å–∏—é\n"
        "‚Ä¢ –ü—Ä–æ—Ç–∏–≤ —Ä–µ—Ä–µ–π–∑–∞: –ö–æ–ª–ª/–†–µ–π–∑\n\n"
        "<i>–ò–≥—Ä–∞–π —Å–º–µ–ª–æ! –≠—Ç–∞ —Ä—É–∫–∞ —Ç–æ–≥–æ —Å—Ç–æ–∏—Ç üöÄ</i>",
        reply_markup=get_game_keyboard(),
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: message.text == "üèÜ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
def show_winner(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
    bot.send_message(
        message.chat.id,
        "üèÜ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–¥–∞—á–∏!</b>\n\n"
        "üÉè <b>–¢–≤–æ—è —Ä—É–∫–∞:</b> A‚ô• K‚ô• - Top Pair, Top Kicker\n"
        "üë• <b>–û–ø–ø–æ–Ω–µ–Ω—Ç:</b> Q‚ô• J‚ô• - Straight\n"
        "üìä <b>–ë–æ—Ä–¥:</b> T‚ô• 9‚ô£ 8‚ô¶ 2‚ô£ 7‚ô•\n\n"
        "üéØ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> –û–ø–ø–æ–Ω–µ–Ω—Ç (Straight)\n"
        "üí∞ <b>–í—ã–∏–≥—Ä—ã—à:</b> 90 —Ñ–∏—à–µ–∫\n\n"
        "üí° <b>–ê–Ω–∞–ª–∏–∑:</b>\n"
        "–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–≥—Ä–∞–ª —Å–∏–ª—å–Ω—É—é —Ä—É–∫—É,\n"
        "–Ω–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É –ø–æ–≤–µ–∑–ª–æ —Å–æ —Å—Ç—Ä–∏—Ç–æ–º.\n\n"
        "<i>–¢–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç –≤ –ø–æ–∫–µ—Ä–µ! –£—á–∏—Å—å –Ω–∞ –æ—à–∏–±–∫–∞—Ö üí™</i>",
        reply_markup=get_game_keyboard(),
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def return_to_main(message):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    bot.send_message(
        message.chat.id,
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=get_main_menu()
    )