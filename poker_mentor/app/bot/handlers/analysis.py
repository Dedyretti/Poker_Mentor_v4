from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.bot.keyboards import get_analysis_options_keyboard, get_back_button

router = Router()

class HandAnalysis(StatesGroup):
    waiting_for_hand = State()

@router.message(Command("analyze"))
@router.message(F.text == "üîç –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏")
async def cmd_analysis(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–∫–∏"""
    analysis_text = """
üîç <b>–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–µ—Ä–Ω–æ–π —Ä—É–∫–∏</b>

–Ø –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—é –ø–æ–∫–µ—Ä–Ω—É—é —Ä—É–∫—É –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–≥—Ä–µ.

–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:
    """
    
    await message.answer(
        analysis_text,
        reply_markup=get_analysis_options_keyboard()
    )

@router.callback_query(F.data == "analyze_random")
async def analyze_random(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏–∑ —Å–ª—É—á–∞–π–Ω–æ–π —Ä—É–∫–∏"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analysis_result = """
üé≤ <b>–ê–Ω–∞–ª–∏–∑ —Å–ª—É—á–∞–π–Ω–æ–π —Ä—É–∫–∏:</b>

üÉè –í–∞—à–∞ —Ä—É–∫–∞: A‚ô† K‚ô†
üéØ –ü–æ–∑–∏—Ü–∏—è: Middle Position (MP)
üí∞ –ë–ª–∞–π–Ω–¥—ã: $1/$2

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚úÖ <b>–†–µ–π–∑ 3x</b> - —Å–∏–ª—å–Ω–∞—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ä—É–∫–∞
üìä <b>–≠–∫–≤–∏—Ç–∏:</b> 45% –ø—Ä–æ—Ç–∏–≤ —Å–ª—É—á–∞–π–Ω–æ–π —Ä—É–∫–∏
üéØ <b>–®–∞–Ω—Å—ã:</b> –•–æ—Ä–æ—à–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –±–∞–Ω–∫–∞

<b>–°–æ–≤–µ—Ç:</b> –ò–≥—Ä–∞–π—Ç–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ, –Ω–æ –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ —Ä–µ—Ä–µ–π–∑–∞–º
    """
    
    await callback.message.edit_text(
        analysis_result,
        reply_markup=get_back_button()
    )
    await callback.answer()

@router.callback_query(F.data == "analyze_custom")
async def analyze_custom_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä—É–∫–∏"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ä—É–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ö–∞—Ä—Ç–∞1 –ö–∞—Ä—Ç–∞2 –ü–æ–∑–∏—Ü–∏—è</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>A‚ô† K‚ô† MP</code>\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: EP, MP, CO, BTN, SB, BB",
        reply_markup=get_back_button()
    )
    await state.set_state(HandAnalysis.waiting_for_hand)
    await callback.answer()

@router.message(HandAnalysis.waiting_for_hand)
async def analyze_custom_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ä—É–∫–∏"""
    hand_input = message.text.strip()
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analysis_result = f"""
üîç <b>–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Ä—É–∫–∏:</b>

üÉè –†—É–∫–∞: {hand_input}
üéØ –ü–æ–∑–∏—Ü–∏—è: MP
üí∞ –ë–ª–∞–π–Ω–¥—ã: $1/$2

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞</b> –±—É–¥–µ—Ç –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AI

<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    """
    
    await message.answer(analysis_result)
    await state.clear()